trigger:
  branches:
    include:
      - main

parameters:
  - name: IMAGE_TAG
    displayName: 'Image Tag'
    type: string
    default: '1.0.0.$(Build.BuildId)'

variables:
  - group: AWS_ECR_Credentials  # Link to variable group containing AWS credentials

stages:
  - stage: BuildAndPush
    displayName: 'Build and Push TEST Docker Image to AWS ECR'
    jobs:
      - job: Build
        displayName: 'Build and Push Job'
        pool:
          vmImage: 'ubuntu-latest'

        steps:
          - checkout: self  # Checkout the source code

          - task: Bash@3
            displayName: 'AWS CLI Setup and Verification'
            inputs:
              targetType: 'inline'
              script: |
                echo "Setting up AWS CLI..."
                aws configure set aws_access_key_id $(AWS_ACCESS_KEY_ID)
                aws configure set aws_secret_access_key $(AWS_SECRET_ACCESS_KEY)
                aws configure set default.region $(AWS_REGION)
                
                echo "Verifying AWS credentials..."
                aws sts get-caller-identity  # Validate credentials setup

          - task: Bash@3
            displayName: 'Login to AWS ECR'
            inputs:
              targetType: 'inline'
              script: |
                echo "Logging in to Amazon ECR..."
                aws ecr get-login-password --region $(AWS_REGION) | docker login --username AWS --password-stdin $(AWS_ACCOUNT_ID).dkr.ecr.$(AWS_REGION).amazonaws.com

          - task: Bash@3
            displayName: 'Build TEST Docker Image'
            inputs:
              targetType: 'inline'
              script: |
                echo "Building the Docker image with test environment configuration..."
                docker build --build-arg DJANGO_SETTINGS_MODULE_ARG=djapp.settings.test -t $(ECR_REPOSITORY):${{ parameters.IMAGE_TAG }}-test .

          - task: Bash@3
            displayName: 'Tag TEST Docker Image'
            inputs:
              targetType: 'inline'
              script: |
                echo "Tagging the Docker image..."
                docker tag $(ECR_REPOSITORY):${{ parameters.IMAGE_TAG }}-test $(AWS_ACCOUNT_ID).dkr.ecr.$(AWS_REGION).amazonaws.com/$(ECR_REPOSITORY):${{ parameters.IMAGE_TAG }}-test

          - task: Bash@3
            displayName: 'Push Docker Image to ECR'
            inputs:
              targetType: 'inline'
              script: |
                echo "Pushing the Docker image to AWS ECR..."
                docker push $(AWS_ACCOUNT_ID).dkr.ecr.$(AWS_REGION).amazonaws.com/$(ECR_REPOSITORY):${{ parameters.IMAGE_TAG }}-test

          - task: Bash@3
            displayName: 'Success Message'
            inputs:
              targetType: 'inline'
              script: |
                echo "Docker image successfully pushed to AWS ECR!"

  - stage: DeployToTEST
    displayName: 'Deploy to TEST Environment'
    dependsOn: BuildAndPush
    jobs:
      - job: Deploy
        displayName: 'Deploy to ECS TEST'
        pool:
          vmImage: 'ubuntu-latest'
        
        steps:
          - checkout: none

          - task: Bash@3
            displayName: 'AWS CLI Setup'
            inputs:
              targetType: 'inline'
              script: |
                echo "Setting up AWS CLI..."
                aws configure set aws_access_key_id $(AWS_ACCESS_KEY_ID)
                aws configure set aws_secret_access_key $(AWS_SECRET_ACCESS_KEY)
                aws configure set default.region $(AWS_REGION)
                
                echo "Verifying AWS credentials..."
                aws sts get-caller-identity  # Validate credentials setup

          - task: Bash@3
            displayName: 'Register New Task Definition Revision'
            inputs:
              targetType: 'inline'
              script: |
                echo "Registering a new task definition revision..."
                aws ecs register-task-definition \
                  --family $(ECS_TASK)-TEST \
                  --network-mode awsvpc \
                  --container-definitions '[
                      {
                          "name": "djapp-container",
                          "image": "$(AWS_ACCOUNT_ID).dkr.ecr.$(AWS_REGION).amazonaws.com/$(ECR_REPOSITORY):${{ parameters.IMAGE_TAG }}-test",
                          "cpu": 1024,
                          "memory": 2048,
                          "essential": true,
                          "portMappings": [
                              {
                                  "containerPort": 8000,
                                  "hostPort": 8000,
                                  "protocol": "tcp"
                              }
                          ]
                      }
                  ]' \
                  --requires-compatibilities "FARGATE" \
                  --cpu "1024" \
                  --memory "2048" \
                  --execution-role-arn "arn:aws:iam::$(AWS_ACCOUNT_ID):role/ecsTaskExecutionRole" \
                  --task-role-arn "arn:aws:iam::$(AWS_ACCOUNT_ID):role/ecsTaskExecutionRole"

          - task: Bash@3
            displayName: 'Update TEST ECS Service to Use New Image'
            inputs:
              targetType: 'inline'
              script: |
                echo "Updating ECS service to use the new Docker image..."
                aws ecs update-service --cluster $(ECS_CLUSTER)-TEST \
                --service $(ECS_SERVICE)-TEST \
                --force-new-deployment \
                --task-definition $(ECS_TASK)-TEST

          - task: Bash@3
            displayName: 'Success Message'
            inputs:
              targetType: 'inline'
              script: |
                echo "Deployment to TEST environment successful!"
